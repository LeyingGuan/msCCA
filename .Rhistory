library(Rcpp)
sourceCpp("/Users/lg689/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/wrappers.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/my_nn_modules.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/LCPrun_func.R")
set.seed(2021)
n <- 1000; n0 <- 1000; m <- 1000
data = sim_data_generator_1D(sim_name = "1D_setA", n = n, n0 = n0, m = m)
xtrain = data$xtrain
ytrain = data$ytrain
xcalibration = data$xcalibration
ycalibration = data$ycalibration
xtest = data$xtest
ytest = data$ytest
PItruth = data$truePI
D = matrix(0, n0, n0)
Dnew = matrix(0, m, n0)
DnewT = matrix(0, n0, m)
for(i in 1:n0){
D[i,] = abs(xcalibration[i] - xcalibration)
}
for(i in 1:m){
Dnew[i,] = abs(xtest[i] - xcalibration)
DnewT[,i] = abs(xtest[i] - xcalibration)
}
eps = abs(ycalibration)
order1 = order(eps)
alpha = .05
myLCR = LCPmodule$new(H =D[order1, order1], V = eps[order1], h = .2, alpha = alpha, type = "distance")
# get the lower index l(i) for i = 1,..., n in the ordered data
myLCR$lower_idx()
# precalculate unnormlized cumulative probablities for training data
myLCR$cumsum_unnormalized()
# fit in the unnormalized weight for the new sample/samples and construct conformal PI
myLCR$LCP_construction(Hnew =Dnew[,order1], HnewT = DnewT[order1,])
deltaLCP = myLCR$band_V
qLL = -deltaLCP
qLU = +deltaLCP
deltaCP = quantile(eps, 1-alpha)
qL =  -rep(deltaCP, m)
qU = rep(deltaCP,m)
par(mfrow = c(2,2), mar = c(2,2,2,2))
plot(Hs[,1], result_tablesII[[1]][2,], xlim= c(min(Hs), 5), ylim = c(0,.4), type = "n", main = "infinite.PI",
ylab  = "percent", xlab = "1/h")
for(k in 1:4){
points(Hs[,k], result_tablesII[[k]][2,], xlim= c(min(Hs), 20),  type = "l", col = k, lty = k, lwd = 2)
}
legend("topright", legend = c("A", "B", "C", "D"), col = 1:4, lty = 1:4, lwd = 2)
plot(Hs[,1], result_tablesII[[1]][3,], xlim= c(min(Hs), 20), ylim = c(1.5,5), type = "n", main = "ave.PI",
ylab  = "ave.length", xlab = "1/h")
for(k in 1:4){
points(Hs[,k], result_tablesII[[k]][3,], xlim= c(min(Hs), 20),  type = "l", col = k, lty = k, lwd = 2)
}
plot(Hs[,1], result_tablesII[[1]][4,], xlim= c(min(Hs), 20), ylim = c(1.5,5), type = "n", main = "ave.PI0",
ylab  = "ave.length", xlab = "1/h")
for(k in 1:4){
points(Hs[,k], result_tablesII[[k]][4,], type = "l", col = k, lty = k, lwd = 2)
}
plot(Hs[,1], result_tablesII[[1]][4,], xlim= c(min(Hs), 5), ylim = c(1.5,5), type = "n",
main = "ave.PI0",ylab  = "ave.length", xlab = "1/h")
for(k in 1:4){
points(Hs[,k], result_tablesII[[k]][4,], type = "l", col = k, lty = k, lwd = 2)
}
ll = order(xtest)
plot(xtest[ll], ytest[ll], type = "p", pch = ".", ylim = c(-3, 4), xlab = 'X', ylab = 'Y')
points(xtest[ll], PItruth[ll,1], type = 'l')
points(xtest[ll], PItruth[ll,2], type = 'l')
points(xtest[ll], qL[ll], type = 'l', col = "blue")
points(xtest[ll], qU[ll], type = 'l', col = "blue")
points(xtest[ll], qLL[ll], type = 'l', col = "red")
points(xtest[ll], qLU[ll], type = 'l', col = "red")
legend("topleft", legend = c("Truth", "CP", "LCP"), lty = 1, col = c("black","blue","red"), bty = "n")
ll = order(xtest)
par(mfrow = c(1,2))
plot(xtest[ll], abs(ytest[ll]), type = "p", pch = ".", ylim = c(0, 4), xlab = 'X', ylab = 'V')
points(xtest[ll], abs(PItruth[ll,1]), type = 'l')
points(xtest[ll], abs(qL[ll]), type = 'l', col = "blue")
legend("topleft", legend = c("Truth", "CP"), lty = 1, col = c("black","blue"), bty = "n")
plot(xtest[ll], ytest[ll], type = "p", pch = ".", ylim = c(-3, 4), xlab = 'X', ylab = 'Y')
points(xtest[ll], PItruth[ll,1], type = 'l')
points(xtest[ll], PItruth[ll,2], type = 'l')
points(xtest[ll], qL[ll], type = 'l', col = "blue")
points(xtest[ll], qU[ll], type = 'l', col = "blue")
ll = order(xtest)
par(mfrow = c(1,2))
plot(xtest[ll], abs(ytest[ll]), type = "p", pch = ".", ylim = c(0, 4), xlab = 'X', ylab = 'V')
points(xtest[ll], abs(PItruth[ll,1]), type = 'l')
points(xtest[ll], abs(qL[ll]), type = 'l', col = "blue")
points(xtest[ll], abs(qLL[ll]), type = 'l', col = "red")
legend("topleft", legend = c("Truth", "CP"), lty = 1, col = c("black","blue"), bty = "n")
legend("topleft", legend = c("Truth", "CP", "LCP"), lty = 1, col = c("black","blue","red"), bty = "n")
plot(xtest[ll], ytest[ll], type = "p", pch = ".", ylim = c(-3, 4), xlab = 'X', ylab = 'Y')
points(xtest[ll], PItruth[ll,1], type = 'l')
points(xtest[ll], PItruth[ll,2], type = 'l')
points(xtest[ll], qL[ll], type = 'l', col = "blue")
points(xtest[ll], qU[ll], type = 'l', col = "blue")
points(xtest[ll], qLL[ll], type = 'l', col = "red")
points(xtest[ll], qLU[ll], type = 'l', col = "red")
Rcpp::sourceCpp('~/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp')
Rcpp::sourceCpp('~/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp')
sourceCpp("/Users/lg689/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/wrappers.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/my_nn_modules.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/LCPrun_func.R")
set.seed(2021)
n <- 1000; n0 <- 1000; m <- 1000
data = sim_data_generator_1D(sim_name = "1D_setA", n = n, n0 = n0, m = m)
xtrain = data$xtrain
ytrain = data$ytrain
xcalibration = data$xcalibration
ycalibration = data$ycalibration
xtest = data$xtest
ytest = data$ytest
PItruth = data$truePI
D = matrix(0, n0, n0)
Dnew = matrix(0, m, n0)
DnewT = matrix(0, n0, m)
for(i in 1:n0){
D[i,] = abs(xcalibration[i] - xcalibration)
}
for(i in 1:m){
Dnew[i,] = abs(xtest[i] - xcalibration)
DnewT[,i] = abs(xtest[i] - xcalibration)
}
eps = abs(ycalibration)
order1 = order(eps)
alpha = .05
# H is the ordered pair-wise distance matrix
myLCR = LCPmodule$new(H =D[order1, order1], V = eps[order1], h = .2, alpha = alpha, type = "distance")
# get the lower index l(i) for i = 1,..., n in the ordered data
myLCR$lower_idx()
# precalculate unnormlized cumulative probablities for training data
myLCR$cumsum_unnormalized()
# fit in the unnormalized weight for the new sample/samples and construct conformal PI
# Dnew is m by n (training) ordered distance matrix for m test samples and n training samples
myLCR$LCP_construction(Hnew =Dnew[,order1], HnewT = DnewT[order1,])
deltaLCP = myLCR$band_V
qLL = -deltaLCP
qLU = +deltaLCP
deltaCP = quantile(eps, 1-alpha)
qL =  -rep(deltaCP, m)
qU = rep(deltaCP,m)
#pdf(file = "/Users/lg689/Dropbox/conformalLocalization/code/LCP/example_intro.pdf", height = 4, width = 4)
ll = order(xtest)
plot(xtest[ll], ytest[ll], type = "p", pch = ".", ylim = c(-3, 4), xlab = 'X', ylab = 'Y')
points(xtest[ll], PItruth[ll,1], type = 'l')
points(xtest[ll], PItruth[ll,2], type = 'l')
points(xtest[ll], qL[ll], type = 'l', col = "blue")
points(xtest[ll], qU[ll], type = 'l', col = "blue")
points(xtest[ll], qLL[ll], type = 'l', col = "red")
points(xtest[ll], qLU[ll], type = 'l', col = "red")
legend("topleft", legend = c("Truth", "CP", "LCP"), lty = 1, col = c("black","blue","red"), bty = "n")
#dev.off()
Rcpp::sourceCpp('~/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp')
sourceCpp("/Users/lg689/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/wrappers.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/my_nn_modules.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/LCPrun_func.R")
set.seed(2021)
n <- 1000; n0 <- 1000; m <- 1000
data = sim_data_generator_1D(sim_name = "1D_setA", n = n, n0 = n0, m = m)
xtrain = data$xtrain
ytrain = data$ytrain
xcalibration = data$xcalibration
ycalibration = data$ycalibration
xtest = data$xtest
ytest = data$ytest
PItruth = data$truePI
D = matrix(0, n0, n0)
Dnew = matrix(0, m, n0)
DnewT = matrix(0, n0, m)
for(i in 1:n0){
D[i,] = abs(xcalibration[i] - xcalibration)
}
for(i in 1:m){
Dnew[i,] = abs(xtest[i] - xcalibration)
DnewT[,i] = abs(xtest[i] - xcalibration)
}
eps = abs(ycalibration)
order1 = order(eps)
alpha = .05
# H is the ordered pair-wise distance matrix
myLCR = LCPmodule$new(H =D[order1, order1], V = eps[order1], h = .2, alpha = alpha, type = "distance")
# get the lower index l(i) for i = 1,..., n in the ordered data
myLCR$lower_idx()
# precalculate unnormlized cumulative probablities for training data
myLCR$cumsum_unnormalized()
# fit in the unnormalized weight for the new sample/samples and construct conformal PI
# Dnew is m by n (training) ordered distance matrix for m test samples and n training samples
myLCR$LCP_construction(Hnew =Dnew[,order1], HnewT = DnewT[order1,])
Rcpp::sourceCpp('~/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp')
myLCR$qlow0
# H is the ordered pair-wise distance matrix
myLCR = LCPmodule$new(H =D[order1, order1], V = eps[order1], h = .2, alpha = alpha, type = "distance")
# get the lower index l(i) for i = 1,..., n in the ordered data
myLCR$lower_idx()
# precalculate unnormlized cumulative probablities for training data
myLCR$cumsum_unnormalized()
# fit in the unnormalized weight for the new sample/samples and construct conformal PI
# Dnew is m by n (training) ordered distance matrix for m test samples and n training samples
myLCR$LCP_construction(Hnew =Dnew[,order1], HnewT = DnewT[order1,])
dim(Dnew[,order1])
myLCR$id_low
length(myLCR$id_low)
Rcpp::sourceCpp('~/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp')
library(Rcpp)
sourceCpp("/Users/lg689/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/wrappers.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/my_nn_modules.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/LCPrun_func.R")
library(Rcpp)
sourceCpp("/Users/lg689/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/wrappers.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/my_nn_modules.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/LCPrun_func.R")
# precalculate unnormlized cumulative probablities for training data
myLCR$cumsum_unnormalized()
# fit in the unnormalized weight for the new sample/samples and construct conformal PI
# Dnew is m by n (training) ordered distance matrix for m test samples and n training samples
myLCR$LCP_construction(Hnew =Dnew[,order1], HnewT = DnewT[order1,])
Rcpp::sourceCpp('~/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp')
sourceCpp("/Users/lg689/Dropbox/conformalLocalization/code/LCP/src/LCPcpp.cpp")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/wrappers.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/my_nn_modules.R")
source("/Users/lg689/Dropbox/conformalLocalization/code/LCP/R/LCPrun_func.R")
set.seed(2021)
n <- 1000; n0 <- 1000; m <- 1000
data = sim_data_generator_1D(sim_name = "1D_setA", n = n, n0 = n0, m = m)
xtrain = data$xtrain
ytrain = data$ytrain
xcalibration = data$xcalibration
ycalibration = data$ycalibration
xtest = data$xtest
ytest = data$ytest
PItruth = data$truePI
D = matrix(0, n0, n0)
Dnew = matrix(0, m, n0)
DnewT = matrix(0, n0, m)
for(i in 1:n0){
D[i,] = abs(xcalibration[i] - xcalibration)
}
for(i in 1:m){
Dnew[i,] = abs(xtest[i] - xcalibration)
DnewT[,i] = abs(xtest[i] - xcalibration)
}
eps = abs(ycalibration)
order1 = order(eps)
alpha = .05
# H is the ordered pair-wise distance matrix
myLCR = LCPmodule$new(H =D[order1, order1], V = eps[order1], h = .2, alpha = alpha, type = "distance")
# get the lower index l(i) for i = 1,..., n in the ordered data
myLCR$lower_idx()
# precalculate unnormlized cumulative probablities for training data
myLCR$cumsum_unnormalized()
# fit in the unnormalized weight for the new sample/samples and construct conformal PI
# Dnew is m by n (training) ordered distance matrix for m test samples and n training samples
myLCR$LCP_construction(Hnew =Dnew[,order1], HnewT = DnewT[order1,])
deltaLCP = myLCR$band_V
qLL = -deltaLCP
qLU = +deltaLCP
deltaCP = quantile(eps, 1-alpha)
qL =  -rep(deltaCP, m)
qU = rep(deltaCP,m)
#pdf(file = "/Users/lg689/Dropbox/conformalLocalization/code/LCP/example_intro.pdf", height = 4, width = 4)
ll = order(xtest)
plot(xtest[ll], ytest[ll], type = "p", pch = ".", ylim = c(-3, 4), xlab = 'X', ylab = 'Y')
points(xtest[ll], PItruth[ll,1], type = 'l')
points(xtest[ll], PItruth[ll,2], type = 'l')
points(xtest[ll], qL[ll], type = 'l', col = "blue")
points(xtest[ll], qU[ll], type = 'l', col = "blue")
points(xtest[ll], qLL[ll], type = 'l', col = "red")
points(xtest[ll], qLU[ll], type = 'l', col = "red")
legend("topleft", legend = c("Truth", "CP", "LCP"), lty = 1, col = c("black","blue","red"), bty = "n")
ll = order(xtest)
plot(xtest[ll], ytest[ll], type = "p", pch = ".", ylim = c(-3, 4), xlab = 'X', ylab = 'Y')
points(xtest[ll], PItruth[ll,1], type = 'l')
points(xtest[ll], PItruth[ll,2], type = 'l')
points(xtest[ll], qL[ll], type = 'l', col = "blue")
points(xtest[ll], qU[ll], type = 'l', col = "blue")
points(xtest[ll], qLL[ll], type = 'l', col = "red")
points(xtest[ll], qLU[ll], type = 'l', col = "red")
legend("topleft", legend = c("Truth", "CP", "LCP"), lty = 1, col = c("black","blue","red"), bty = "n")
getwd()
rm(list = ls())
require(Rcpp)
require(RcppArmadillo)
require(tools)
getwd()
setwd(""../..)
setwd("../..")
getwd()
setwd("..")
getwd()
require(Rcpp)
require(RcppArmadillo)
require(tools)
RcppArmadillo.package.skeleton("LCP")
getwd()
compileAttributes(pkgdir = "LCP", verbose = TRUE)
package_native_routine_registration_skeleton("LCP", character_only = FALSE)
pkgbuild::compile_dll()
?compile_dll
pkgbuild::compile_dll(path = "LCP")
?document
devtools::document(pkg = "LCP")
?check
devtools::check(pkg = "LCP")
devtools::check(pkg = "LCP")
getwd()
setwd("LCP/")
compileAttributes(pkgdir = "LCP", verbose = TRUE)
package_native_routine_registration_skeleton("LCP", character_only = FALSE)
roxygen2
library(roxygen2)
ls
getwd()
pkgbuild::compile_dll(path = "LCP")
devtools::document(pkg = "LCP")
devtools::document(pkg = "LCP")
devtools::document(pkg = "LCP")
devtools::document(pkg = "LCP")
devtools::document(pkg = "LCP")
devtools::document(pkg = "LCP")
devtools::document(pkg = "LCP")
pkgbuild::compile_dll(path = "LCP")
devtools::document(pkg = "LCP")
devtools::check(pkg = "LCP")
compileAttributes(pkgdir = "LCP", verbose = TRUE)
package_native_routine_registration_skeleton("LCP", character_only = FALSE)
pkgbuild::compile_dll(path = "LCP")
devtools::document(pkg = "LCP")
devtools::check(pkg = "LCP")
devtools::document(pkg = "LCP")
getwd()
setwd("Dropbox/conformalLocalization/LCP")
compileAttributes(pkgdir = "LCP", verbose = TRUE)
package_native_routine_registration_skeleton("LCP", character_only = FALSE)
pkgbuild::compile_dll(path = "LCP")
devtools::document(pkg = "LCP")
devtools::check(pkg = "LCP")
devtools::document(pkg = "LCP")
getwd()
getwd()
setwd("/Users/lg689/Dropbox/CrossCorrespondance/mutilpleSetLinear/code/msCCA")
ls
?RcppArmadillo.package.skeleton
require(Rcpp)
require(RcppArmadillo)
require(tools)
?RcppArmadillo.package.skeleton
?RcppArmadillo.package.skeleton()
RcppArmadillo.package.skeleton(".")
rm(list = ls())
require(Rcpp)
require(RcppArmadillo)
require(tools)
RcppArmadillo.package.skeleton(".")
package.skeleton("LCP")
require(RcppArmadillo)
require(tools)
RcppArmadillo.package.skeleton("LCP")
compileAttributes(pkgdir = ".", verbose = TRUE)
getwd()
rm(list =ls())
require(Rcpp)
require(RcppArmadillo)
require(tools)
compileAttributes(pkgdir = ".", verbose = TRUE)
package_native_routine_registration_skeleton(".", character_only = FALSE)
compileAttributes(pkgdir = ".", verbose = TRUE)
package_native_routine_registration_skeleton(".", character_only = FALSE)
getwd()
rm(list = ls())
require(Rcpp)
require(RcppArmadillo)
require(tools)
compileAttributes(pkgdir = ".", verbose = TRUE)
package_native_routine_registration_skeleton(".", character_only = FALSE)
RcppArmadillo.package.skeleton("msCCA")
compileAttributes(pkgdir = ".", verbose = TRUE)
package_native_routine_registration_skeleton(".", character_only = FALSE)
pkgbuild::compile_dll(path = ".")
devtools::document(pkg = ".")
devtools::check(pkg = ".")
pkgbuild::compile_dll(path = ".")
devtools::document(pkg = ".")
devtools::check(pkg = ".")
devtools::document(pkg = ".")
pkgbuild::compile_dll(path = ".")
devtools::document(pkg = ".")
devtools::check(pkg = ".")
devtools::document(pkg = ".")
rm(list = ls())
require(Rcpp)
require(RcppArmadillo)
require(tools)
compileAttributes(pkgdir = ".", verbose = TRUE)
package_native_routine_registration_skeleton(".", character_only = FALSE)
pkgbuild::compile_dll(path = ".")
devtools::document(pkg = ".")
devtools::check(pkg = ".")
devtools::document(pkg = ".")
1296.12145/60
92364919/1024
92364919/1024/1024
92364919/1024/1024*1000
92364919/1024/1024*1000/1024
144612441/92364919
?xtable
library(xtable)
?xtable
rnorm(10)
rnorm(20)
